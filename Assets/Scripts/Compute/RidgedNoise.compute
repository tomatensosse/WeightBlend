#pragma kernel Density
#include "\Includes\Density.compute"
#include "\Includes\Noise.compute"

StructuredBuffer<float3> offsets;
int octaves;
float lacunarity;
float persistence;
float noiseScale;
float ridgeWeight; // MUST BE ABOVE 0 !!!

[numthreads(numThreads, numThreads, numThreads)]
void Density(int3 id : SV_DispatchThreadID)
{
    if (id.x >= numPointsPerAxis || id.y >= numPointsPerAxis || id.z >= numPointsPerAxis) {
        return;
    }

    float3 pos = centre + id * spacing - boundsSize / 2;
    float noise = 0;
    float frequency = noiseScale / 100;
    float amplitude = 1;

    for (int j = 0; j < octaves; j++) {
        float n = snoise(pos * frequency + offsets[j]);
        noise += n * amplitude;
        amplitude *= persistence;
        frequency *= lacunarity;
    }

    noise = pow(noise, ridgeWeight);
    float finalVal = -(pos.y) + noise;
    int index = indexFromCoord(id.x, id.y, id.z);
    points[index] = float4(pos, finalVal);
}